{"version":3,"file":"static/js/294.12787158.chunk.js","mappings":"0OACA,G,QAAgC,gCAAhC,EAAyE,yBAAzE,EAAoH,iCAApH,EAAsK,gCAAtK,EAAwP,sBAAxP,EAA6R,8BAA7R,EAAuU,2BAAvU,EAA4W,yBAA5W,EAAiZ,2BAAjZ,EAAwb,2B,SCyClbA,EAAa,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,GAAIC,EAAa,EAAbA,QACrB,OACI,iBAAKC,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SAAuCH,KACvC,gBAAKE,UAAWC,EAAhB,SAAyCF,QAKrD,EAvC4B,SAAC,GAA+B,IAA9BG,EAA6B,EAA7BA,gBAAiBC,EAAY,EAAZA,OAErCC,EAAUF,EAAgBG,KAAI,SAAAC,GAChC,OACI,SAACT,EAAD,CAA0BC,GAAIQ,EAAKC,OAAQR,QAASO,EAAKE,MAAxCF,EAAKG,OAI9B,OACI,iBAAKT,UAAWC,EAAhB,UACKG,GACD,kBAAMM,SAAUP,EAAOQ,aAAvB,WACA,qBACIX,UAAWC,EACXW,KAAK,UACLC,KAAM,GAAIC,KAAM,EAChBC,MAAOZ,EAAOa,OAAOjB,QACrBkB,SAAUd,EAAOe,aACjBC,YAAY,8GAEZ,mBACInB,UAAWC,EACXmB,KAAM,SAFV,2ECIhB,EApBqC,SAAC,GAA2C,IAA1CC,EAAyC,EAAzCA,mBAAoBnB,EAAqB,EAArBA,gBAEjDC,GAASmB,EAAAA,EAAAA,IAAU,CACrBC,cAAe,CACXxB,QAAS,IAEbyB,iBAAkBC,EAAAA,GAAW,CACzB1B,QAAS0B,EAAAA,KAAaC,IAAI,EAAG,qFAAqBC,SAAS,uGAE/DjB,SAAU,SAAAM,GACNK,EAAmBL,EAAOjB,SAC1BiB,EAAOjB,QAAU,MAIzB,OACI,SAAC,EAAD,CAAMG,gBAAiBA,EAAiBC,OAAQA,KCOlDyB,EAAgB,SAAC,GAAoB,IAAnBnB,EAAkB,EAAlBA,GAAIoB,EAAc,EAAdA,SAExB,OACI,SAAC,KAAD,CAASC,GAAE,mBAAcrB,GAAgBT,UAAWC,EAApD,SAAkF4B,GAA9CpB,IAI5C,EA9B+B,SAAC,GAA4D,IAA3DsB,EAA0D,EAA1DA,gBAAiB7B,EAAyC,EAAzCA,gBAAiBmB,EAAwB,EAAxBA,mBAEzDjB,EAAU2B,EAAgB1B,KAAI,SAAAC,GAEhC,OACI,SAACsB,GAAD,UAAiCtB,GAAbA,EAAKG,OAIjC,OACI,iCACI,iBAAKT,UAAWC,EAAhB,WACI,eAAID,UAAWC,EAAf,0DACA,gBAAKD,UAAWC,EAAhB,SACKG,QAGT,SAAC,EAAD,CAAeF,gBAAiBA,EAAiBmB,mBAAoBA,Q,oBC1B3EW,EAA6B,SAACC,GAAD,MAA0B,CACzDC,QAAQC,EAAAA,EAAAA,IAAYF,KCRXG,EAAiB,SAAAH,GAC1B,OAAOA,EAAMI,aAAanC,iBAGjBoC,EAAiB,SAAAL,GAC1B,OAAOA,EAAMI,aAAaN,iBCc9B,GAAeQ,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,KARoB,SAAAP,GACpB,MAAO,CACHF,gBAAiBO,EAAeL,GAChC/B,gBAAiBkC,EAAeH,MAKX,CAACZ,mBAAAA,EAAAA,KFLE,SAAAoB,GAQ5B,OAAOD,EAAAA,EAAAA,IAAQR,EAARQ,EANkC,SAAAE,GACtC,OAAKA,EAAMR,QAEJ,SAACO,GAAD,UAAeC,KAFI,SAAC,KAAD,CAAUZ,GAAI,gBEC/C,CAGEa","sources":["webpack://social_network/./src/Component/Message/Message.module.css?e4ff","Component/Message/Chat/Chat.tsx","Component/Message/Chat/ChatContainer.tsx","Component/Message/Message.tsx","hoc/WithAuthRedirect.tsx","Redux/Selectors/messageSelector.js","Component/Message/MessageContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"message_title\":\"Message_message_title__fB2W6\",\"message\":\"Message_message__gtVfI\",\"message_dialogs\":\"Message_message_dialogs__fh6c1\",\"message_person\":\"Message_message_person__RaGgd\",\"active_chat\":\"Message_active_chat__Fbqk-\",\"chat\":\"Message_chat__EpsGM\",\"chat_message\":\"Message_chat_message__bCgie\",\"chat_text\":\"Message_chat_text__VbfzS\",\"chat_by\":\"Message_chat_by__4l+A2\",\"chat_area\":\"Message_chat_area__n0vyC\",\"chat_send\":\"Message_chat_send__-BJTJ\"};","import * as React from \"react\";\nimport {FC} from \"react\";\n\n// @ts-ignore\nimport messageStyle from '../Message.module.css'\nimport {messageChatType} from \"../../../Redux/messageReducer\";\n\ntype PropsType = {\n    messageUserChat: messageChatType[]\n    formik: any\n}\n\nconst Chat: FC<PropsType> = ({messageUserChat, formik}) => {\n\n    const content = messageUserChat.map(item => {\n        return (\n            <ChatPerson key={item.id} by={item.sendBy} message={item.text} />\n        )\n    });\n\n    return (\n        <div className={messageStyle.chat}>\n            {content}\n            <form onSubmit={formik.handleSubmit}>\n            <textarea\n                className={messageStyle.chat_area}\n                name=\"message\"\n                cols={70} rows={3}\n                value={formik.values.message}\n                onChange={formik.handleChange}\n                placeholder=\"Место для сообщения\"\n            />\n                <button\n                    className={messageStyle.chat_send}\n                    type={\"submit\"}\n                >Отправить</button>\n            </form>\n        </div>\n    )\n}\n\n\nconst ChatPerson = ({by, message}) => {\n    return (\n        <div className={messageStyle.chat_message}>\n            <div className={messageStyle.chat_by}>{by}</div>\n            <div className={messageStyle.chat_text}>{message}</div>\n        </div>\n    )\n}\n\nexport default Chat;","import {FC} from \"react\";\nimport {useFormik} from \"formik\";\nimport * as Yup from \"yup\";\n\nimport {messageChatType} from \"../../../Redux/messageReducer\";\n// @ts-ignore\nimport Chat from \"./Chat.tsx\";\n\nimport '../Message.module.css'\n\n\ntype PropsType = {\n    sendMessageCreator: (str: string) => void,\n    messageUserChat: messageChatType[]\n}\n\nconst ChatContainer: FC<PropsType> = ({sendMessageCreator, messageUserChat}) => {\n\n    const formik = useFormik({\n        initialValues: {\n            message: ''\n        },\n        validationSchema: Yup.object({\n            message: Yup.string().min(1, \"Минимум 1 символ\" ).required(\"Обязательное поле\")\n        }),\n        onSubmit: values => {\n            sendMessageCreator(values.message);\n            values.message = '';\n        }\n    })\n\n    return (\n        <Chat messageUserChat={messageUserChat} formik={formik} />\n    )\n}\n\nexport default ChatContainer;","import {FC} from \"react\";\nimport {NavLink} from \"react-router-dom\";\n\n// @ts-ignore\nimport ChatContainer from \"./Chat/ChatContainer.tsx\";\n// @ts-ignore\nimport messageStyle from './Message.module.css';\nimport {messageChatType, messageType} from \"../../Redux/messageReducer\";\n\n\ntype PropsType = {\n    messageUserData: messageType[],\n    messageUserChat: messageChatType[],\n    sendMessageCreator: (str: string) => void\n}\n\nconst Message: FC<PropsType> = ({messageUserData, messageUserChat, sendMessageCreator}) => {\n\n    const content = messageUserData.map(item => {\n\n        return (\n            <MessagePerson key={item.id} {...item}  />\n        )\n    });\n\n    return (\n        <>\n            <div className={messageStyle.message}>\n                <h1 className={messageStyle.message_title}>Мои чаты</h1>\n                <div className={messageStyle.message_dialogs}>\n                    {content}\n                </div>\n            </div>\n            <ChatContainer messageUserChat={messageUserChat} sendMessageCreator={sendMessageCreator} />\n        </>\n    );\n}\n\n\nconst MessagePerson = ({id, userName}) => {\n\n    return (\n        <NavLink to={`/message/${id}`} key={id}  className={messageStyle.message_person}>{userName}</NavLink>\n    )\n}\n\nexport default Message;","import * as React from \"react\";\nimport {Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport {getAuthInfo} from \"../Redux/Selectors/authSelector\";\nimport {AppStateType} from \"../Redux/reduxStore\";\nimport {FC} from \"react\";\n\nconst mapStateToPropsForRedirect = (state: AppStateType) => ({\n    isAuth: getAuthInfo(state)\n} as PropsType);\n\ntype PropsType = {\n    isAuth: boolean\n}\n\nexport const WithAuthRedirect = Component => {\n\n    const RedirectComponent: FC<PropsType> = props => {\n       if (!props.isAuth) return <Redirect to={\"/login\"} />\n\n       return <Component {...props} />\n    }\n\n    return connect(mapStateToPropsForRedirect)(RedirectComponent);\n}","export const getMessageChat = state => {\n    return state.messagesPage.messageUserChat\n}\n\nexport const getMessageData = state => {\n    return state.messagesPage.messageUserData;\n}","import {connect} from \"react-redux\";\nimport {compose} from \"redux\";\n\n// @ts-ignore\nimport {sendMessageCreator} from \"../../Redux/messageReducer.ts\";\n// @ts-ignore\nimport Message from \"./Message.tsx\";\n// @ts-ignore\nimport {WithAuthRedirect} from \"../../hoc/WithAuthRedirect.tsx\";\nimport {getMessageChat, getMessageData} from \"../../Redux/Selectors/messageSelector\";\n\n\nconst mapStateToProps = state => {\n    return {\n        messageUserData: getMessageData(state),\n        messageUserChat: getMessageChat(state),\n    }\n}\n\nexport default compose<any>(\n    connect(mapStateToProps, {sendMessageCreator}),\n    WithAuthRedirect\n)(Message)\n"],"names":["ChatPerson","by","message","className","messageStyle","messageUserChat","formik","content","map","item","sendBy","text","id","onSubmit","handleSubmit","name","cols","rows","value","values","onChange","handleChange","placeholder","type","sendMessageCreator","useFormik","initialValues","validationSchema","Yup","min","required","MessagePerson","userName","to","messageUserData","mapStateToPropsForRedirect","state","isAuth","getAuthInfo","getMessageChat","messagesPage","getMessageData","compose","connect","Component","props","Message"],"sourceRoot":""}